name: Create repo via issue form

run-name: Execute create repo request from @${{ github.actor }}

on:
    issues:
        types: 
            - opened
            - edited

          
jobs:
    check-preconditions:
      name: Check preconditions
      runs-on: ubuntu-latest
      outputs:
        create-repo: ${{ steps.verify-label.outputs.result }}
      steps:
        - name: Verify issue type and label
          uses: actions/github-script@v6
          id: verify-label
          with:
            result-encoding: string
            script: |
                let result = false
                const labelContent = 'repo-request'
                context.payload.issue.labels.forEach(label => {
                    if (label.name === labelContent) {
                        core.info("Label: " + labelContent + " found")
                        result = true
                    }
                })
                return result
        - name: test
          run: echo ${{ steps.verify-label.outputs.result }}
   
    create-repo:
        name: Create repo via issue-form
        #if: needs.check-preconditions.outputs.create-repo == 'true'
        needs: check-preconditions
        runs-on: ubuntu-latest
        steps:
            - name: test
              run: echo ${{ needs.check-preconditions.outputs.create-repo }}

            - name: Verify-label issue type and label
              uses: actions/github-script@v6
              with:
                script: |
                    context.payload.issue.labels.forEach(label => {
                        if (label.name === 'create-repo') {
                            core.setOutput('create-repo', true)
                        }
                    })
                    return false

            - name: checkout repo
              uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                node-version: 16
                
            - name: Install dependencies
              run: npm install @octokit/rest @octokit/auth-app @actions/github

            - name: Generate JWT
              id: generate_jwt
              uses: actions/github-script@v6
              env: 
                APP_ID: ${{ secrets.APP_ID }}
                APP_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                APP_INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}
              with:
                script: |
                  const { getOctokit } = require("@actions/github");
                  const { createAppAuth } = require("@octokit/auth-app");
                  const { request } = require("@octokit/request");

                  const app = createAppAuth({
                    appId: process.env.APP_ID,
                    privateKey: process.env.APP_PRIVATE_KEY,
                    request: request.defaults({
                      baseUrl: "${{ github.api_url }}"
                    }),
                  });

                  const authApp = await app({ type: "app" });
                  const octokit = await getOctokit( authApp.token );

                  try {
                    const { data: installation } =
                      await octokit.rest.apps.createInstallationAccessToken({
                        installation_id: process.env.APP_INSTALLATION_ID
                      });

                    const installationToken = installation.token;
                    core.setSecret(installationToken);
                    core.setOutput("token", installationToken);
                  } catch (error) {
                    core.setFailed(error.message);
                  }

            - name: Create repo
              uses: actions/github-script@v6
              with:
                github-token: ${{ steps.generate_jwt.outputs.token }}
                script: |
                  const script = require('${{github.workspace}}/.github/scripts/create-repo.js')
                  await script({github, context, core})

